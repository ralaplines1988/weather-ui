[{"C:\\Users\\Nick\\Desktop\\weather-ui\\src\\index.js":"1","C:\\Users\\Nick\\Desktop\\weather-ui\\src\\App.js":"2","C:\\Users\\Nick\\Desktop\\weather-ui\\src\\serviceWorker.js":"3","C:\\Users\\Nick\\Desktop\\weather-ui\\src\\components\\WeatherIcon.js":"4"},{"size":555,"mtime":1608210197993,"results":"5","hashOfConfig":"6"},{"size":7361,"mtime":1608732122089,"results":"7","hashOfConfig":"6"},{"size":5227,"mtime":1608210197993,"results":"8","hashOfConfig":"6"},{"size":2976,"mtime":1608814644256,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"u2d6y",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Nick\\Desktop\\weather-ui\\src\\index.js",[],["20","21"],"C:\\Users\\Nick\\Desktop\\weather-ui\\src\\App.js",["22"],"import { ReactComponent as AirFlowIcon } from './images/airFlow.svg';\r\nimport WeatherIcon from './components/WeatherIcon';\r\nimport { ReactComponent as RainIcon } from './images/rain.svg';\r\nimport React, { useState, useEffect,useCallback } from 'react';\r\nimport { ReactComponent as RefreshIcon } from './images/refresh.svg';\r\nimport { ReactComponent as LoadingIcon } from './images/loading.svg';\r\nimport styled from '@emotion/styled';\r\nimport { ThemeProvider } from '@emotion/react';\r\nimport dayjs from 'dayjs';\r\n\r\nconst theme = {\r\n  light: {\r\n    backgroundColor: '#ededed',\r\n    foregroundColor: '#f9f9f9',\r\n    boxShadow: '0 1px 3px 0 #999999',\r\n    titleColor: '#212121',\r\n    temperatureColor: '#757575',\r\n    textColor: '#828282',\r\n  },\r\n  dark: {\r\n    backgroundColor: '#1F2022',\r\n    foregroundColor: '#121416',\r\n    boxShadow:\r\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\r\n    titleColor: '#f9f9fa',\r\n    temperatureColor: '#dddddd',\r\n    textColor: '#cccccc',\r\n  },\r\n};\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.backgroundColor};\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst WeatherCard = styled.div`\r\n  position: relative;\r\n  min-width: 360px;\r\n  box-shadow: ${({ theme }) => theme.boxShadow};\r\n  background-color: ${({ theme }) => theme.foregroundColor};\r\n  box-sizing: border-box;\r\n  padding: 30px 15px;\r\n`;\r\n\r\nconst Location = styled.div`\r\n  font-size: 28px;\r\n  color: ${({ theme }) => theme.titleColor};\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Description = styled.div`\r\n  font-size: 16px;\r\n  color: ${({ theme }) => theme.textColor};\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst CurrentWeather = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst Temperature = styled.div`\r\n  color: ${({ theme }) => theme.temperatureColor};\r\n  font-size: 96px;\r\n  font-weight: 300;\r\n  display: flex;\r\n`;\r\n\r\nconst Celsius = styled.div`\r\n  font-weight: normal;\r\n  font-size: 42px;\r\n`;\r\n\r\nconst AirFlow = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 16x;\r\n  font-weight: 300;\r\n  color: ${({ theme }) => theme.textColor};\r\n  margin-bottom: 20px;\r\n\r\n  svg {\r\n    width: 25px;\r\n    height: auto;\r\n    margin-right: 30px;\r\n  }\r\n`;\r\n\r\nconst Rain = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 16x;\r\n  font-weight: 300;\r\n  color: ${({ theme }) => theme.textColor};\r\n\r\n  svg {\r\n    width: 25px;\r\n    height: auto;\r\n    margin-right: 30px;\r\n  }\r\n`;\r\n\r\n// const DayCloudy = styled(DayCloudyIcon)`\r\n//   flex-basis: 30%;\r\n// `;\r\n\r\nconst Refresh = styled.div`\r\n\r\n\r\n  position: absolute;\r\n  right: 15px;\r\n  bottom: 15px;\r\n  font-size: 12px;\r\n  display: inline-flex;\r\n  align-items: flex-end;\r\n  color: ${({ theme }) => theme.textColor};\r\n\r\n  svg {\r\n    margin-left: 10px;\r\n    width: 15px;\r\n    height: 15px;\r\n    cursor: pointer;\r\n    animation: rotate infinite 1.5s linear;\r\n    animation-duration: ${({ isLoading }) => (isLoading ? '1.5s' : '0s')};\r\n  }\r\n\r\n  @keyframes rotate {\r\n    from {\r\n      transform: rotate(360deg);\r\n    }\r\n    to {\r\n      transform: rotate(0deg);\r\n    }\r\n  }\r\n`;\r\n\r\nconst AUTHORIZATION_KEY = `CWB-55D95517-6D30-439C-A61B-BBCD697ACCB2`;\r\nconst LOCATION_NAME = `臺北`;\r\nconst LOCATION_NAME_FORECAST = `臺北市`;\r\n\r\nconst fetchCurrentWeather = async () => {\r\n  const data = await fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${AUTHORIZATION_KEY}&locationName=${LOCATION_NAME}`)\r\n    .then(response => response.json())\r\n    .then(data => data);\r\n  const locationData = data.records.location[0];\r\n  const weatherElements = locationData.weatherElement.reduce(\r\n    (neededElements, item) => {\r\n      if (['WDSD', 'TEMP'].includes(item.elementName)) {\r\n        neededElements[item.elementName] = item.elementValue;\r\n      }\r\n      return neededElements;\r\n    }, {}\r\n  )\r\n  return ({\r\n    locationName: locationData.locationName,\r\n    windSpeed: weatherElements.WDSD,\r\n    temperature: weatherElements.TEMP,\r\n    observationTime: locationData.time.obsTime,\r\n    isLoading: false,\r\n  });\r\n}\r\n\r\nconst fetchWeatherForecast = async () => {\r\n  const data = await fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${AUTHORIZATION_KEY}&locationName=${LOCATION_NAME_FORECAST}`)\r\n    .then(response => response.json())\r\n    .then(data => data);\r\n  const [locationData] = data.records.location; // Or const records = data.records.location[0];\r\n  // console.log(locationData);\r\n  const weatherElements = locationData.weatherElement.reduce(\r\n    (neededElements, item) => {\r\n      if (['Wx', 'PoP', 'CI'].includes(item.elementName)) {\r\n        neededElements[item.elementName] = item.time[0].parameter;\r\n      }\r\n      return neededElements;\r\n    }, {}\r\n  );\r\n  return ({\r\n    description: weatherElements.Wx.parameterName,\r\n    weatherCode: weatherElements.Wx.parameterValue,\r\n    rainPossibility: weatherElements.PoP.parameterName,\r\n    comfortability: weatherElements.CI.parameterName,\r\n  });\r\n}\r\n\r\nconst App = () => {\r\n  // console.log(`invoke function component!`);\r\n\r\n  const [currentTheme, setCurrentTheme] = useState('dark');\r\n  const [weatherElement, setWeatherElement] = useState({\r\n    locationName: '',\r\n    description: '',\r\n    windSpeed: 0,\r\n    temperature: 0,\r\n    rainPossibility: 0,\r\n    observationTime: new Date(),\r\n    comfortability: '',\r\n    weatherCode: 0,\r\n    isLoading: true,\r\n  });\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setWeatherElement(prevState => ({\r\n      ...prevState,\r\n      isLoading: true,\r\n    }))\r\n    const [currentWeather, weatherForecast] = await Promise.all([fetchCurrentWeather(), fetchWeatherForecast()]);\r\n    // console.log(currentWeather, weatherForecast);\r\n    setWeatherElement({\r\n      ...currentWeather,\r\n      ...weatherForecast,\r\n      isLoading: false,\r\n    })\r\n  },[]);\r\n\r\n  useEffect(() => {\r\n    // console.log('execute function in useEffect!');\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  const {\r\n    observationTime,\r\n    locationName,\r\n    description,\r\n    windSpeed,\r\n    temperature,\r\n    rainPossibility,\r\n    isLoading,\r\n    comfortability,\r\n  } = weatherElement;\r\n  // render code area\r\n  return (\r\n    <ThemeProvider theme={theme[currentTheme]}>\r\n      <Container>\r\n        {/* {console.log(`render isLoading: `, isLoading)} */}\r\n        <WeatherCard>\r\n          <Location>{locationName}</Location>\r\n          <Description>{description} {comfortability}</Description>\r\n          <CurrentWeather>\r\n            <Temperature>\r\n              {Math.round(temperature)} <Celsius>°C</Celsius>\r\n            </Temperature>\r\n            <WeatherIcon />\r\n          </CurrentWeather>\r\n          <AirFlow>\r\n            <AirFlowIcon /> {windSpeed} m/h\r\n        </AirFlow>\r\n          <Rain>\r\n            <RainIcon /> {rainPossibility}%\r\n        </Rain>\r\n          <Refresh isLoading={isLoading}>\r\n            最後觀測時間：\r\n            {new Intl.DateTimeFormat('zh-TW', {\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n          }).format(dayjs(observationTime))}\r\n            {isLoading ? <LoadingIcon /> : <RefreshIcon onClick={fetchData} />}\r\n          </Refresh>\r\n        </WeatherCard>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Nick\\Desktop\\weather-ui\\src\\serviceWorker.js",[],"C:\\Users\\Nick\\Desktop\\weather-ui\\src\\components\\WeatherIcon.js",["23","24"],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":193,"column":24,"nodeType":"31","messageId":"32","endLine":193,"endColumn":39},{"ruleId":"29","severity":1,"message":"33","line":32,"column":7,"nodeType":"31","messageId":"32","endLine":32,"endColumn":19},{"ruleId":"29","severity":1,"message":"34","line":54,"column":7,"nodeType":"31","messageId":"32","endLine":54,"endColumn":23},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'setCurrentTheme' is assigned a value but never used.","Identifier","unusedVar","'weatherIcons' is assigned a value but never used.","'weatherCode2Type' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]